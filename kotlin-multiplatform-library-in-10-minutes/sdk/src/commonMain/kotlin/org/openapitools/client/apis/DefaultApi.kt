/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import org.openapitools.client.models.SendAnSms200Response
import org.openapitools.client.models.SendAnSms200Response1

import org.openapitools.client.infrastructure.*
import io.ktor.client.HttpClient
import io.ktor.client.HttpClientConfig
import io.ktor.client.request.forms.formData
import io.ktor.client.engine.HttpClientEngine
import kotlinx.serialization.json.Json
import io.ktor.http.ParametersBuilder
import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

open class DefaultApi : ApiClient {

    constructor(
        baseUrl: String = ApiClient.BASE_URL,
        httpClientEngine: HttpClientEngine? = null,
        httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
        jsonSerializer: Json = ApiClient.JSON_DEFAULT
    ) : super(baseUrl = baseUrl, httpClientEngine = httpClientEngine, httpClientConfig = httpClientConfig, jsonBlock = jsonSerializer)

    constructor(
        baseUrl: String,
        httpClient: HttpClient
    ): super(baseUrl = baseUrl, httpClient = httpClient)


    /**
     * enum for parameter format
     */
    @Serializable
    enum class FormatSendAnSms(val value: kotlin.String) {
        
        @SerialName(value = "json")
        json("json"),
        
        @SerialName(value = "xml")
        xml("xml")
        
    }


    /**
     * enum for parameter messageClass
     */
    @Serializable
    enum class MessageClassSendAnSms(val value: kotlin.Int) {
        
        @SerialName(value = "0")
        _0(0),
        
        @SerialName(value = "1")
        _1(1),
        
        @SerialName(value = "2")
        _2(2),
        
        @SerialName(value = "3")
        _3(3)
        
    }


    /**
     * enum for parameter type
     */
    @Serializable
    enum class TypeSendAnSms(val value: kotlin.String) {
        
        @SerialName(value = "text")
        text("text"),
        
        @SerialName(value = "binary")
        binary("binary"),
        
        @SerialName(value = "unicode")
        unicode("unicode")
        
    }

    /**
     * Send an SMS
     * Send an outbound SMS from your Vonage account
     * @param format The format of the response (default to json)
     * @param apiKey Your API key
     * @param from The name or number the message should be sent from. Alphanumeric senderID&#39;s are not supported in all countries, see [Global Messaging](/messaging/sms/guides/global-messaging#country-specific-features) for more details. If alphanumeric, spaces will be ignored. Numbers are specified in E.164 format.
     * @param to The number that the message should be sent to. Numbers are specified in E.164 format.
     * @param apiSecret Your API secret. Required unless &#x60;sig&#x60; is provided (optional)
     * @param sig The hash of the request parameters in alphabetical order, a timestamp and the signature secret. See [Signing Requests](/getting-started/concepts/signing-messages) for more details. (optional)
     * @param text The body of the message being sent. If your message contains characters that can be encoded according to the GSM Standard and Extended tables then you can set the &#x60;type&#x60; to &#x60;text&#x60;. If your message contains characters outside this range, then you will need to set the &#x60;type&#x60; to &#x60;unicode&#x60;. (optional)
     * @param ttl **Advanced**: The duration in milliseconds the delivery of an SMS will be attempted. By default Vonage attempts delivery for 72 hours, however the maximum effective value depends on the operator and is typically 24 - 48 hours. We recommend this value should be kept at its default or at least 30 minutes. (optional, default to 259200000)
     * @param statusReportReq **Advanced**: Boolean indicating if you like to receive a [Delivery Receipt](/messaging/sms/building-blocks/receive-a-delivery-receipt). (optional, default to true)
     * @param paramCallback **Advanced**: The webhook endpoint the delivery receipt for this sms is sent to. This parameter overrides the webhook endpoint you set in Dashboard. Max 100 characters. (optional)
     * @param messageClass **Advanced**: The Data Coding Scheme value of the message (optional)
     * @param type **Advanced**: The format of the message body (optional, default to text)
     * @param body **Advanced**: Hex encoded binary data. Depends on &#x60;type&#x60; parameter having the value &#x60;binary&#x60;. (optional)
     * @param udh **Advanced**: Your custom Hex encoded [User Data Header](https://en.wikipedia.org/wiki/User_Data_Header). Depends on &#x60;type&#x60; parameter having the value &#x60;binary&#x60;. (optional)
     * @param protocolId **Advanced**: The value of the [protocol identifier](https://en.wikipedia.org/wiki/GSM_03.40#Protocol_Identifier) to use. Ensure that the value is aligned with &#x60;udh&#x60;. (optional)
     * @param clientRef **Advanced**: You can optionally include your own reference of up to 100 characters. (optional)
     * @param accountRef **Advanced**: An optional string used to identify separate accounts using the SMS endpoint for billing purposes. To use this feature, please email [support](mailto:${CUSTOMER_SUPPORT_EMAIL}) (optional)
     * @param entityId **Advanced**: A string parameter that satisfies regulatory requirements when sending an SMS to specific countries. For more information please refer to the [Country-Specific Outbound SMS Features](https://api.support.vonage.com/hc/en-us/articles/115011781468) (optional)
     * @param contentId **Advanced**: A string parameter that satisfies regulatory requirements when sending an SMS to specific countries. For more information please refer to the [Country-Specific Outbound SMS Features](https://api.support.vonage.com/hc/en-us/articles/115011781468) (optional)
     * @return SendAnSms200Response
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun sendAnSms(format: FormatSendAnSms = FormatSendAnSms.json, apiKey: kotlin.String, from: kotlin.String, to: kotlin.String, apiSecret: kotlin.String? = null, sig: kotlin.String? = null, text: kotlin.String? = null, ttl: kotlin.Int? = 259200000, statusReportReq: kotlin.Boolean? = true, paramCallback: kotlin.String? = null, messageClass: MessageClassSendAnSms? = null, type: TypeSendAnSms? = TypeSendAnSms.text, body: kotlin.String? = null, udh: kotlin.String? = null, protocolId: kotlin.Int? = null, clientRef: kotlin.String? = null, accountRef: kotlin.String? = null, entityId: kotlin.String? = null, contentId: kotlin.String? = null): HttpResponse<SendAnSms200Response> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            ParametersBuilder().also {
                apiKey?.apply { it.append("api_key", apiKey.toString()) }
                apiSecret?.apply { it.append("api_secret", apiSecret.toString()) }
                sig?.apply { it.append("sig", sig.toString()) }
                from?.apply { it.append("from", from.toString()) }
                to?.apply { it.append("to", to.toString()) }
                text?.apply { it.append("text", text.toString()) }
                ttl?.apply { it.append("ttl", ttl.toString()) }
                statusReportReq?.apply { it.append("status-report-req", statusReportReq.toString()) }
                paramCallback?.apply { it.append("callback", paramCallback.toString()) }
                messageClass?.apply { it.append("message-class", messageClass.toString()) }
                type?.apply { it.append("type", type.toString()) }
                body?.apply { it.append("body", body.toString()) }
                udh?.apply { it.append("udh", udh.toString()) }
                protocolId?.apply { it.append("protocol-id", protocolId.toString()) }
                clientRef?.apply { it.append("client-ref", clientRef.toString()) }
                accountRef?.apply { it.append("account-ref", accountRef.toString()) }
                entityId?.apply { it.append("entity-id", entityId.toString()) }
                contentId?.apply { it.append("content-id", contentId.toString()) }
            }.build()

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/{format}".replace("{" + "format" + "}", "${ format.value }"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return urlEncodedFormRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


}
