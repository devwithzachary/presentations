/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import org.openapitools.client.models.InboundMessage

class InboundMessageTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of InboundMessage
        //val modelInstance = InboundMessage()

        // to test the property `apiKey` - The Vonage API Key of the receiving account.
        should("test apiKey") {
            // uncomment below to test the property
            //modelInstance.apiKey shouldBe ("TODO")
        }

        // to test the property `msisdn` - The phone number that this inbound message was sent from. Numbers are specified in E.164 format.
        should("test msisdn") {
            // uncomment below to test the property
            //modelInstance.msisdn shouldBe ("TODO")
        }

        // to test the property `to` - The phone number the message was sent to. **This is your virtual number**. Numbers are specified in E.164 format.
        should("test to") {
            // uncomment below to test the property
            //modelInstance.to shouldBe ("TODO")
        }

        // to test the property `messageId` - The ID of the message
        should("test messageId") {
            // uncomment below to test the property
            //modelInstance.messageId shouldBe ("TODO")
        }

        // to test the property `text` - The message body for this inbound message.
        should("test text") {
            // uncomment below to test the property
            //modelInstance.text shouldBe ("TODO")
        }

        // to test the property `type` - Possible values are:    - `text` - standard text.   - `unicode` - URLencoded   unicode  . This is valid for standard GSM, Arabic, Chinese, double-encoded characters and so on.   - `binary` - a binary message. 
        should("test type") {
            // uncomment below to test the property
            //modelInstance.type shouldBe ("TODO")
        }

        // to test the property `keyword` - The first word in the message body. Converted to upper case.
        should("test keyword") {
            // uncomment below to test the property
            //modelInstance.keyword shouldBe ("TODO")
        }

        // to test the property `messageTimestamp` - The time when Vonage started to push this Delivery Receipt to your webhook endpoint.
        should("test messageTimestamp") {
            // uncomment below to test the property
            //modelInstance.messageTimestamp shouldBe ("TODO")
        }

        // to test the property `timestamp` - A unix timestamp representation of message-timestamp.
        should("test timestamp") {
            // uncomment below to test the property
            //modelInstance.timestamp shouldBe ("TODO")
        }

        // to test the property `nonce` - A random string that forms part of the signed set of parameters, it adds an extra element of unpredictability into the signature for the request. You use the nonce and timestamp parameters with your shared secret to calculate and validate the signature for inbound messages.
        should("test nonce") {
            // uncomment below to test the property
            //modelInstance.nonce shouldBe ("TODO")
        }

        // to test the property `concat` - True - if this is a concatenated message. This field does not exist if it is a single message
        should("test concat") {
            // uncomment below to test the property
            //modelInstance.concat shouldBe ("TODO")
        }

        // to test the property `concatRef` - The transaction reference. All parts of this message share this value.
        should("test concatRef") {
            // uncomment below to test the property
            //modelInstance.concatRef shouldBe ("TODO")
        }

        // to test the property `concatTotal` - The number of parts in this concatenated message.
        should("test concatTotal") {
            // uncomment below to test the property
            //modelInstance.concatTotal shouldBe ("TODO")
        }

        // to test the property `concatPart` - The number of this part in the message. Counting starts at 1.
        should("test concatPart") {
            // uncomment below to test the property
            //modelInstance.concatPart shouldBe ("TODO")
        }

        // to test the property ``data`` - The content of this message, if type is binary.
        should("test `data`") {
            // uncomment below to test the property
            //modelInstance.`data` shouldBe ("TODO")
        }

        // to test the property `udh` - The hex encoded User Data Header, if type is binary
        should("test udh") {
            // uncomment below to test the property
            //modelInstance.udh shouldBe ("TODO")
        }

    }
}
